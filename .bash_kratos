##################################
############# KRATOS #############
##################################

export PYTHONPATH=~/software/Kratos:$PYTHONPATH
compilekratos() { # has to be a function bcs vs code doesn't recognize it otherwise
    kratoscompilation mpi relwdbg $1
}
export -f compilekratos

alias compilekratosdebug="kratoscompilation mpi debug $1"
alias compilekratosserial="kratoscompilation serial release $1"

deletekratoslibs() {
local libs_dir="~/software/Kratos/libs"
echo -n -e "\e[1;43m Removing Kratos libraries ... \e[0m"

if find "$libs_dir" -mindepth 1 -print -quit | grep -q .; then
    (rm -r "$libs_dir" && if [ -f ~/software/.kratoscompilation.info ]; then rm ~/software/.kratoscompilation.info; fi && echo -e "\e[1;43mdone \e[0m") || echo -e "\e[1;43mfailed \e[0m"
else
    echo -e "\e[1;43mnothing to remove \e[0m"
fi

if [ ! -d "$libs_dir" ]; then
    mkdir "$libs_dir"
fi
}
export -f deletekratoslibs

kratoscompilation() {
    local start_time=`date +%s`
    if [[ $# < 2 ]]; then
        echo "Not enough input arguments"
        return 1
    fi 
    
    local base_dir=$(pwd)
    
    cp ~/software/configure_sh_general.txt ~/software/.configure_sh_temp.txt
    
    if [[ $1 == "serial" ]]; then
        sed -i "s/-DMETIS_APPLICATION=XXX/-DMETIS_APPLICATION=OFF/g" ~/software/.configure_sh_temp.txt
        sed -i "s/DTRILINOS_APPLICATION=XXX/DTRILINOS_APPLICATION=OFF/g" ~/software/.configure_sh_temp.txt
    elif [[ $1 == "mpi" ]]; then
        sed -i "s/-DMETIS_APPLICATION=XXX/-DMETIS_APPLICATION=ON/g" ~/software/.configure_sh_temp.txt
        sed -i "s/DTRILINOS_APPLICATION=XXX/DTRILINOS_APPLICATION=ON/g" ~/software/.configure_sh_temp.txt
        startOpenMPI
    else 
       echo "Input argument 1 - \"$1\" - not valid, choose \"serial\" or \"mpi\""
       exit 0
    fi

    if [[ $2 == "release" ]]; then
        sed -i "s/DCMAKE_BUILD_TYPE=XXX/DCMAKE_BUILD_TYPE=Release/g" ~/software/.configure_sh_temp.txt
        local mode="Release"
    elif [[ $2 == "debug" ]]; then
        sed -i "s/DCMAKE_BUILD_TYPE=XXX/DCMAKE_BUILD_TYPE=Debug/g" ~/software/.configure_sh_temp.txt
        local mode="Debug"
    elif [[ $2 == "relwdbg" ]]; then
        sed -i "s/DCMAKE_BUILD_TYPE=XXX/DCMAKE_BUILD_TYPE=RelWithDebInfo/g" ~/software/.configure_sh_temp.txt
        local mode="RelWithDebInfo"
    else 
       echo "Input argument 2 - \"$2\" - not valid, choose \"release\", \"debug\", \"relwdbg\""
       return 0
    fi

    local cmake_folder="cmake_build_$1_$2"
    eval local build_dir="~/software/Kratos/$cmake_folder"
    
    if [ ! -d "$build_dir" ]; then
        throwerror "Directory \"$cmake_folder\"does not exist"
    fi
    
    if [[ $3 == "clean" ]]; then
        printinfo "Performing clean compilation"
        rm -r "$build_dir"
        mkdir "$build_dir" 
    fi

    cd "$build_dir" &> /dev/null  
    
    cp ~/software/.configure_sh_temp.txt configure.sh  
    rm ~/software/.configure_sh_temp.txt

    getactivebranch compiled_branch

    echo -n "compiling branch: "
    echo -e "\t\e[1;44m ${compiled_branch} \e[0m"
    
    echo -n "compiling mode: "
    echo -e "\t\e[1;44m $1 \e[0m"
    
    echo -n "compiling version: "
    echo -e "\t\e[1;44m ${mode} \e[0m \n"
    
    startCMake
    
    deletekratoslibs    
    
    if \time -f%E -o ~/.tmp.txt sh configure.sh ; then
        echo "${compiled_branch}" > ~/software/.kratoscompilation.info 
        echo "$1" >> ~/software/.kratoscompilation.info 
        echo "$mode" >> ~/software/.kratoscompilation.info 
        echo -e "\e[1;42m Compilation Successful \e[0m"
    else
        echo -e "\e[1;41m Compilation Failed \e[0m"
    fi

    cd $base_dir                    # switch back to original folder
    
    local end_time=`date +%s`
    printtime start_time end_time
}

export -f kratoscompilation

runkratos() {
# function to execute kratos serial or in parallel
local start_time=`date +%s`
kratosinformation
checkbranch

    if [[ $# = 0 ]]; then
        echo "No inputfile given"
        return 1
        
    elif [[ $# = 1 ]]; then
        if [[ $version == "mpi" ]]; then  
            printwarning "running serial Kratos with mpi compilation!"
        fi
        echo "===== SERIAL EXECUTION ====="
        sleep 2
        python3.5 $1
        
        local end_time=`date +%s`
        printtime start_time end_time
        
    elif [[ $# = 2 ]]; then
        if [[ $version == "serial" ]]; then
            throwerror "trying to run Kratos with serial compilation in MPI!"
        fi
        echo "===== PARALLEL EXECUTION ====="
        echo "with $2 processes"
        startOpenMPI
        sleep 2
        mpiexec -np $2 python3.5 $1
    
        local end_time=`date +%s`
        printtime start_time end_time
    
     else
        echo "Too many input arguments given"
        return 1
     fi
}
export -f runkratos

kratosinformation() {
if [ ! -f ~/software/.kratoscompilation.info ]; then
    throwerror "No Kratos Libraries available!"
else
    branch="$(sed '1q;d' ~/software/.kratoscompilation.info)"
    version="$(sed '2q;d' ~/software/.kratoscompilation.info)"
    mode="$(sed '3q;d' ~/software/.kratoscompilation.info)"

    echo -e "\e[1mCompiled Configuration Information: \e[0m"
    echo -e "Branch: \t\e[1;48;5;4m $branch \e[0m"
    echo -e "Version: \t\e[1;48;5;4m $version \e[0m"
    if [[ $mode == "Debug" ]]; then
        echo -e "Mode: \t\t\e[1;48;5;37m $mode \e[0m"
    else
        echo -e "Mode: \t\t\e[1;48;5;4m $mode \e[0m"
    fi
fi

}
export -f kratosinformation

checkbranch() {
    getactivebranch active_branch
    local compiled_branch="$(sed '1q;d' ~/software/.kratoscompilation.info)"
    
    if [[ $active_branch != $compiled_branch ]]; then
        echo -e "\n\t Compiled branch: $compiled_branch"
        echo -e "\t Active branch: $active_branch"
        printwarning "Compiled branch is different from active branch"
    fi
}
export -f checkbranch

getactivebranch() {
    cd ~/software/Kratos
    local branch="$(git branch | grep \* | cut -d ' ' -f2)"
    cd - &> /dev/null
    local  __resultvar=$1
    eval $__resultvar="'$branch'"
}
export -f getactivebranch

printinfo() {
    local info2print="Info: "$1
    echo -e "\e[1;48;5;105m $info2print \e[0m\n"
    sleep 2
}

printwarning() {
    local warning2print="Warning: "$1
    echo -e "\e[1;48;5;166m $warning2print \e[0m\n"
    sleep 2
}
export -f printwarning

throwerror() {
    local error2print="Error: "$1
    echo -e "\e[1;48;5;124m $error2print \e[0m"
    kill -INT $$
}
export -f throwerror

printtime() {
    local runtime=$(($2-$1))
    printf '\e[1mexecution time: \e[1;48;5;57m%dd %02dh : %02dm : %02ds\e[0m\n' $(($runtime/86400)) $(($runtime%86400/3600)) $(($runtime%3600/60)) $(($runtime%60))
}
export -f printtime

#=========================Cmake-3.6.0==========================================
startCMake() {
    source ~/software/CMake/setup.sh
}
export -f startCMake
#alias startCMake="source /home/philippb/software/CMake/setup.sh"

#===========================Kratos=============================================
startOpenMPI_2_0_2() {
    source ~/software/OpenMPI/setup_2.0.2.sh
}
export -f startOpenMPI_2_0_2

startOpenMPI_1_10_7() {
    source ~/software/OpenMPI/setup_1.10.7.sh
}
export -f startOpenMPI_1_10_7

startOpenMPI() { # pointing to globally used installation
    startOpenMPI_1_10_7
}
export -f startOpenMPI